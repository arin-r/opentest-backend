import mongoose from "mongoose";
import User from "../models/User";
import TestSession from "../models/TestSession";

const processAndClearTestSession = async (
  attempts: any,
  questions: any,
  userId: mongoose.Types.ObjectId,
  reason: string,
  testSessionId: mongoose.Types.ObjectId
) => {
  let score = 0;
  /**
   * Below is probably the most infeficient code in this entire project
   * TODO: optimise using a hashmap (question._id => question.correctAnswer).
   *       Compare the memory tradeoff with time. Which can save more money if ran on an EC2 ?
   */
  for (const attempt of attempts) {
    for (const question of questions) {
      if (attempt.questionId.toString() === question._id.toString()) {
        if (attempt.chosenOptionId != null) {
          if (attempt.chosenOptionId === question.correctAnswer) {
            score += 4;
          } else {
            score -= 1;
          }
        }
      }
    }
  }

  await TestSession.findOneAndUpdate({ _id: testSessionId }, { score: score });

  User.updateOne({ _id: userId }, { $unset: { ongoingTestSession: 1 } })
    .then((res) => {
      console.log(reason);
    })
    .catch((err) => {
      console.log("something went wrong while removing user.ongoingsession");
    });
};

export default processAndClearTestSession;
